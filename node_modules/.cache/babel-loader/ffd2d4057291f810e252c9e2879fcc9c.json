{"ast":null,"code":"var _jsxFileName = \"/Users/temp/Desktop/web_projects/definition/src/components/Definitions/Definitions.js\";\nimport React from 'react';\nimport './Definitions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Definitions(_ref) {\n  let {\n    definitions\n  } = _ref;\n  // \tconst [ verbTitle, setVerbTitle ] = React.useState(false);\n  // \tconst adjTitle = '';\n  // \tconst nounTitle = '';\n  // \tconst someTitle = '';\n  // \tconst verbArray =[];\n  // \tconst nounArray =[];\n  // \tconst adjArray =[];\n  // \tconst adverbArray = [];\n  const someArray = []; // \tconst array = [ 1, 2, 3, 4, 5 ];\n  // \tconst array1 = [ 7, 1, 6, 3, 2 ];\n  // \tconst array2 = [];\n  // \tconst minNum = 1;\n  // console.log('definitions: ', definitions);\n  // React.useEffect(() => {\n  // \tdefinitions.forEach((item) => {\n  // \t\tif (item.partOfSpeech === 'verb') {\n  // \t\t\tsetVerbTitle('verb');\n  // \t\t\tverbArray.push(item.definition);\n  // \t\t\tconsole.log('verbArray: ', verbArray);\n  // \t\t}\n  // \t\telse if (item.partOfSpeech === 'noun') {\n  // \t\t\tadjArray.push(item.definition);\n  // \t\t}\n  // \t\telse if (item.partOfSpeech === 'null') {\n  // \t\t\tnullArray.push(item.definition);\n  // \t\t}\n  // \t\telse {\n  // \t\t\tsomeArray.push(item.definition);\n  // \t\t}\n  // \t});\n  // }, [definitions]);\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"definitions\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"definitions__container\",\n      children: [function () {\n        definitions.forEach((definition, index) => {\n          let item = definition.definition;\n          someArray.push( /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"definition__list\",\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 20\n          }, this));\n        });\n      }(), someArray]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n}\n\n_c = Definitions;\n{\n  /* {for (let i = 0; i < someArray.length; i++) {\n  \t<li className=\"definition__list\" key={i}>{someArray[i]}</li>\n  }} */\n} // {\n// \t{definitions.forEach((definition) => {\n// \t\tlet item = definition.definition;\n// \t\tsomeArray.push(item);\n// \t})}\n// \t{console.log('someArray: ', someArray)}\n// \t{someArray.forEach((item, index) => {\n// \t\tlet info = item;\n// \t\tconsole.log('info:', info);\n// \t\treturn <li className=\"definition__list\" key={index}>{info}</li>;\n// \t\t})}\n// \t}\n\n{\n  /* {definitions.forEach((definition) => {\n  \tif (definition.partOfSpeech === 'verb') {\n  \tverbArray.push(definition.definition);\n  }\n  else if (definition.partOfSpeech === 'noun') {\n  \tnounArray.push(definition.definition);\n  }\n  else if (definition.partOfSpeech === 'adjective') {\n  \tadjArray.push(definition.definition);\n  }\n  else if (definition.partOfSpeech === 'adverb') {\n  \tadverbArray.push(definition.definition);\n  }\n  else {\n  \tsomeArray.push(definition.definition);\n  }\n  })} */\n}\n{\n  /* <h3>forEach</h3>\n  <ul>\n  {array.forEach((item, index) => {\n  \tlet info = item;\n  \treturn <li key={index}>{info}</li>;\n  })}\n  </ul> */\n}\n{\n  /* <h3>map</h3>\n  <ul>\n  {array.map((item, index) => {\n  \treturn <li key={index}>{item}</li>;\n  })}\n  </ul> */\n}\n{\n  /* {verbArray.length !== 0 && <h3>verb</h3>}\n  {verbArray.map((item, index) => {\n  return <li className=\"definition__list\" key={index}><i>{item}</i></li>;\n  })}\n  {nounArray.length !== 0 && <h3>noun</h3>}\n  {nounArray.map((item, index) => {\n  return <li className=\"definition__list\" key={index}><i>{item}</i></li>;\n  })}\n  {adjArray.length !== 0 && <h3>adjective</h3>}\n  {adjArray.map((item, index) => {\n  return <li className=\"definition__list\" key={index}><i>{item}</i></li>;\n  })}\n  {adverbArray.length !== 0 && <h3>adverb</h3>}\n  {adverbArray.map((item, index) => {\n  return <li className=\"definition__list\" key={index}><i>{item}</i></li>;\n  })}\n  {someArray.length !== 0 && <h3>description</h3>}\n  {someArray.map((item, index) => {\n  return <li className=\"definition__list\" key={index}><i>{item}</i></li>;\n  })} */\n} // \t\t\t</ul>\n// \t\t</section>\n// \t);\n// }\n\nexport default Definitions; // const firstLetter = definition.definition.charAt(0).toUpperCase();\n\n{\n  /* <li className=\"definition__list\" key={index}>\n  <h3>{verbTitle}</h3>\n  <i>{firstLetter + definition.definition.slice(1) + ' (' + definition.partOfSpeech + ')'}</i>\n  </li> */\n}\n{\n  /* {definitions.map((definition, index) => {\n  { if (definition.partOfSpeech === 'verb') {\n  verbArray.push(definition.definition);\n  <li className=\"definition__list\" key={index}><i>{definition.definition}</i></li>\n  }\n  else if (definition.partOfSpeech === 'adjective') {\n  <li className=\"definition__list\" key={index}><i>{definition.definition}</i></li>\n  }\n  else if (definition.partOfSpeech === 'noun') {\n  <li className=\"definition__list\" key={index}><i>{definition.definition}</i></li>\n  }\n  else {\n  <li className=\"definition__list\" key={index}><i>{definition.definition}</i></li>\n  }\n  }\n  })} */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Definitions\");","map":{"version":3,"sources":["/Users/temp/Desktop/web_projects/definition/src/components/Definitions/Definitions.js"],"names":["React","Definitions","definitions","someArray","forEach","definition","index","item","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,mBAAP;;;AAEA,SAASC,WAAT,OAAsC;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAEtC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACC,QAAMC,SAAS,GAAE,EAAjB,CAXqC,CAatC;AACA;AACA;AAEA;AAEC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;;AAED,sBACC;AAAS,IAAA,SAAS,EAAC,aAAnB;AAAA,2BACC;AAAI,MAAA,SAAS,EAAC,wBAAd;AAAA,iBAMC,YAAU;AACVD,QAAAA,WAAW,CAACE,OAAZ,CAAoB,CAACC,UAAD,EAAYC,KAAZ,KAAsB;AAC1C,cAAIC,IAAI,GAAGF,UAAU,CAACA,UAAtB;AACAF,UAAAA,SAAS,CAACK,IAAV,eAAe;AAAI,YAAA,SAAS,EAAC,kBAAd;AAAA,sBAA8CD;AAA9C,aAAsCD,KAAtC;AAAA;AAAA;AAAA;AAAA,kBAAf;AACC,SAHD;AAGG,OAJH,EAND,EAYFH,SAZE;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAmBA;;KA3DQF,W;AA8DP;AAAC;AACH;AACA;AAAQ,C,CAON;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQE;AAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEW;AAEP;AAAC;AACL;AACA;AACA;AACA;AACA;AACA;AAAa;AAET;AAAC;AACL;AACA;AACA;AACA;AACA;AACa;AAKT;AAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIW,C,CAEX;AACA;AACA;AACA;;AAEA,eAAeA,WAAf,C,CAEC;;AAEK;AAAC;AACP;AACA;AACA;AAAe;AAER;AAAC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAW","sourcesContent":["import React from 'react';\nimport './Definitions.css'\n\nfunction Definitions({ definitions }) {\n\n// \tconst [ verbTitle, setVerbTitle ] = React.useState(false);\n// \tconst adjTitle = '';\n// \tconst nounTitle = '';\n// \tconst someTitle = '';\n\n// \tconst verbArray =[];\n// \tconst nounArray =[];\n// \tconst adjArray =[];\n// \tconst adverbArray = [];\n\tconst someArray =[];\n\n// \tconst array = [ 1, 2, 3, 4, 5 ];\n// \tconst array1 = [ 7, 1, 6, 3, 2 ];\n// \tconst array2 = [];\n\n// \tconst minNum = 1;\n\n\t// console.log('definitions: ', definitions);\n\n\t// React.useEffect(() => {\n\t// \tdefinitions.forEach((item) => {\n\t// \t\tif (item.partOfSpeech === 'verb') {\n\t// \t\t\tsetVerbTitle('verb');\n\t// \t\t\tverbArray.push(item.definition);\n\t// \t\t\tconsole.log('verbArray: ', verbArray);\n\t// \t\t}\n\t// \t\telse if (item.partOfSpeech === 'noun') {\n\t// \t\t\tadjArray.push(item.definition);\n\t// \t\t}\n\t// \t\telse if (item.partOfSpeech === 'null') {\n\t// \t\t\tnullArray.push(item.definition);\n\t// \t\t}\n\t// \t\telse {\n\t// \t\t\tsomeArray.push(item.definition);\n\t// \t\t}\n\t// \t});\n  // }, [definitions]);\n\n\treturn (\n\t\t<section className=\"definitions\">\n\t\t\t<ul className=\"definitions__container\">\n\n\t\t\t {/* {definitions.map((definition, index) => {\n\t\t\t\treturn <li className=\"definition__list\" key={index}>{definition.definition}</li>;\n\t\t\t})} */}\n\n\t\t\t{function(){\n\t\t\t\tdefinitions.forEach((definition,index) => {\n\t\t\t\tlet item = definition.definition;\n\t\t\t\tsomeArray.push(<li className=\"definition__list\" key={index}>{item}</li>)\n\t\t\t\t})}()\n\t\t\t}\n{someArray}\n\n\t\t\t</ul>\n\t\t</section>\n\t);\n}\n\n\n\t\t{/* {for (let i = 0; i < someArray.length; i++) {\n\t\t\t\t<li className=\"definition__list\" key={i}>{someArray[i]}</li>\n\t\t}} */}\n\n\n\t\t\n\n\n\n\t\t// {\n\t\t// \t{definitions.forEach((definition) => {\n\t\t// \t\tlet item = definition.definition;\n\t\t// \t\tsomeArray.push(item);\n\t\t// \t})}\n\t\t// \t{console.log('someArray: ', someArray)}\n\t\t// \t{someArray.forEach((item, index) => {\n\t\t// \t\tlet info = item;\n\t\t// \t\tconsole.log('info:', info);\n\t\t// \t\treturn <li className=\"definition__list\" key={index}>{info}</li>;\n\t\t// \t\t})}\n\t\t// \t}\n\n\n\n\n\n\n\t\t\t\n\t\t\t\t{/* {definitions.forEach((definition) => {\n\n\t\t\t\t\tif (definition.partOfSpeech === 'verb') {\n\t\t\t\t\t\tverbArray.push(definition.definition);\n\t\t\t\t\t}\n\t\t\t\t\telse if (definition.partOfSpeech === 'noun') {\n\t\t\t\t\t\tnounArray.push(definition.definition);\n\t\t\t\t\t}\n\t\t\t\t\telse if (definition.partOfSpeech === 'adjective') {\n\t\t\t\t\t\tadjArray.push(definition.definition);\n\t\t\t\t\t}\n\t\t\t\t\telse if (definition.partOfSpeech === 'adverb') {\n\t\t\t\t\t\tadverbArray.push(definition.definition);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsomeArray.push(definition.definition);\n\t\t\t\t\t}\n\n\t\t\t\t})} */}\n\n\t\t\t\t{/* <h3>forEach</h3>\n\t\t\t\t<ul>\n\t\t\t\t\t{array.forEach((item, index) => {\n\t\t\t\t\t\tlet info = item;\n\t\t\t\t\t\treturn <li key={index}>{info}</li>;\n\t\t\t\t\t})}\n\t\t\t\t</ul> */}\n\n\t\t\t\t{/* <h3>map</h3>\n\t\t\t\t<ul>\n\t\t\t\t\t{array.map((item, index) => {\n\t\t\t\t\t\treturn <li key={index}>{item}</li>;\n\t\t\t\t\t})}\n\n\t\t\t\t</ul> */}\n\n\n\n\n\t\t\t\t{/* {verbArray.length !== 0 && <h3>verb</h3>}\n\t\t\t\t{verbArray.map((item, index) => {\n\t\t\t\t\treturn <li className=\"definition__list\" key={index}><i>{item}</i></li>;\n\t\t\t\t})}\n\n\t\t\t\t{nounArray.length !== 0 && <h3>noun</h3>}\n\t\t\t\t{nounArray.map((item, index) => {\n\t\t\t\t\treturn <li className=\"definition__list\" key={index}><i>{item}</i></li>;\n\t\t\t\t})}\n\n\t\t\t\t{adjArray.length !== 0 && <h3>adjective</h3>}\n\t\t\t\t{adjArray.map((item, index) => {\n\t\t\t\t\treturn <li className=\"definition__list\" key={index}><i>{item}</i></li>;\n\t\t\t\t})}\n\n\t\t\t\t{adverbArray.length !== 0 && <h3>adverb</h3>}\n\t\t\t\t{adverbArray.map((item, index) => {\n\t\t\t\t\treturn <li className=\"definition__list\" key={index}><i>{item}</i></li>;\n\t\t\t\t})}\n\n\t\t\t\t{someArray.length !== 0 && <h3>description</h3>}\n\t\t\t\t{someArray.map((item, index) => {\n\t\t\t\t\treturn <li className=\"definition__list\" key={index}><i>{item}</i></li>;\n\t\t\t\t})} */}\n\n// \t\t\t</ul>\n// \t\t</section>\n// \t);\n// }\n\nexport default Definitions;\n\n\t// const firstLetter = definition.definition.charAt(0).toUpperCase();\n\n\t\t\t\t\t\t{/* <li className=\"definition__list\" key={index}>\n\t\t\t\t\t\t\t<h3>{verbTitle}</h3>\n\t\t\t\t\t\t\t<i>{firstLetter + definition.definition.slice(1) + ' (' + definition.partOfSpeech + ')'}</i>\n\t\t\t\t\t\t</li> */}\n\n\t\t\t\t\t\t\t{/* {definitions.map((definition, index) => {\n\t\t\t\t\t{ if (definition.partOfSpeech === 'verb') {\n\t\t\t\t\t\t\tverbArray.push(definition.definition);\n\t\t\t\t\t\t\t<li className=\"definition__list\" key={index}><i>{definition.definition}</i></li>\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (definition.partOfSpeech === 'adjective') {\n\t\t\t\t\t\t\t<li className=\"definition__list\" key={index}><i>{definition.definition}</i></li>\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (definition.partOfSpeech === 'noun') {\n\t\t\t\t\t\t\t<li className=\"definition__list\" key={index}><i>{definition.definition}</i></li>\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t<li className=\"definition__list\" key={index}><i>{definition.definition}</i></li>\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})} */}\n"]},"metadata":{},"sourceType":"module"}